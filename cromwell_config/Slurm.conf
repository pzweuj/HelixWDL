# CROMWELL CONFIG
# pzweuj
# 20250724
include required(classpath("application"))

# Cromwell HTTP server settings
webservice {
  port = 8000
}

# LSF config
backend {
  default = slurm
  providers {
    slurm {
      actor-factory = "cromwell.backend.impl.sfs.config.ConfigBackendLifecycleActorFactory"
      
      # 默认的配置
      config {
        # 默认的运行路径
        root = "/path/to/run_project"

        # 默认的runtime
        runtime-attributes = """
        Int runtime_minutes = 1440
        Int cpus = 2
        Int requested_memory_mb_per_core = 8000
        String? binding
        String queue = "normal"
        """
        
        run-in-background = true
        kill = "scancel ${job_id}"
        check-alive = "squeue -j ${job_id}"
        job-id-regex = "Submitted batch job (\\d+).*"

        # 投递命令
        submit = """
        if [ -z "${container}" ]; then
          # 无容器运行
          sbatch \
            -J ${job_name} \
            -D ${cwd} \
            -o ${out} \
            -e ${err} \
            -t ${runtime_minutes} \
            -p ${queue} \
            -n ${cpus} \
            --mem-per-cpu=${requested_memory_mb_per_core} \
            --wrap "/usr/bin/env bash ${script}"
        else
          # 智能选择容器运行时
          if [[ "${container}" == *.sif ]]; then
            # SIF文件使用singularity
            CONTAINER_CMD="singularity"
          else
            # Docker镜像优先使用podman，不存在则使用docker
            if command -v podman >/dev/null 2>&1; then
              CONTAINER_CMD="podman"
            else
              CONTAINER_CMD="docker"
            fi
          fi
          
          # 根据容器运行时和绑定情况构建命令
          if [ "${CONTAINER_CMD}" = "singularity" ]; then
            if [ -z "${binding}" ]; then
              CONTAINER_RUN_CMD="singularity exec --bind ${cwd}:${cwd} ${container} /usr/bin/env bash ${script}"
            else
              CONTAINER_RUN_CMD="singularity exec --bind ${cwd}:${cwd},${binding} ${container} /usr/bin/env bash ${script}"
            fi
          else
            # podman 和 docker 使用相同的语法
            if [ -z "${binding}" ]; then
              CONTAINER_RUN_CMD="${CONTAINER_CMD} run --rm -v ${cwd}:${cwd} ${container} /usr/bin/env bash ${script}"
            else
              CONTAINER_RUN_CMD="${CONTAINER_CMD} run --rm -v ${cwd}:${cwd} -v ${binding} ${container} /usr/bin/env bash ${script}"
            fi
          fi
          
          sbatch \
            -J ${job_name} \
            -D ${cwd} \
            -o ${out} \
            -e ${err} \
            -t ${runtime_minutes} \
            -p ${queue} \
            -n ${cpus} \
            --mem-per-cpu=${requested_memory_mb_per_core} \
            --wrap "${CONTAINER_RUN_CMD}"
        fi
        """
      }

      filesystems {
        local {
          localization: [
            "hard-link", "copy"
          ]

          caching {
            duplication-strategy: [
              "hard-link", "copy"
            ]

            hashing-strategy: "file"
            check-sibling-md5: false
          }
        }
      }
    }
  }
}
