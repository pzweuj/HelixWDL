# CROMWELL CONFIG FOR SINGLE NODE
# pzweuj
# 20250724
include required(classpath("application"))

# Cromwell HTTP server settings
webservice {
  port = 8001
}

# Single node local execution config
backend {
  default = Local
  providers {
    Local {
      actor-factory = "cromwell.backend.impl.sfs.config.ConfigBackendLifecycleActorFactory"
      
      # 默认的配置
      config {
        # 默认的运行路径
        root = "/path/to/run_project"

        # 默认的runtime
        runtime-attributes = """
        Int runtime_minutes = 1440
        Int cpus = 2
        Int requested_memory_mb = 8000
        String? binding
        """
        
        run-in-background = true
        
        # 本地执行不需要作业调度系统的kill和check命令
        # 使用默认的进程管理

        # 投递命令 - 本地直接执行
        submit = """
        if [ -z "${container}" ]; then
          # 无容器运行 - 直接本地执行
          /usr/bin/env bash ${script}
        else
          # 智能选择容器运行时
          if [[ "${container}" == *.sif ]]; then
            # SIF文件使用singularity
            CONTAINER_CMD="singularity"
          else
            # Docker镜像优先使用podman，不存在则使用docker
            if command -v podman >/dev/null 2>&1; then
              CONTAINER_CMD="podman"
            else
              CONTAINER_CMD="docker"
            fi
          fi
          
          # 根据容器运行时和绑定情况构建命令
          if [ "${CONTAINER_CMD}" = "singularity" ]; then
            if [ -z "${binding}" ]; then
              singularity exec --bind ${cwd}:${cwd} ${container} /usr/bin/env bash ${script}
            else
              singularity exec --bind ${cwd}:${cwd},${binding} ${container} /usr/bin/env bash ${script}
            fi
          else
            # podman 和 docker 使用相同的语法
            if [ -z "${binding}" ]; then
              ${CONTAINER_CMD} run --rm -v ${cwd}:${cwd} ${container} /usr/bin/env bash ${script}
            else
              ${CONTAINER_CMD} run --rm -v ${cwd}:${cwd} -v ${binding} ${container} /usr/bin/env bash ${script}
            fi
          fi
        fi
        """

        # 本地执行的并发控制
        concurrent-job-limit = 4
      }

      filesystems {
        local {
          localization: [
            "hard-link", "copy"
          ]

          caching {
            duplication-strategy: [
              "hard-link", "copy"
            ]

            hashing-strategy: "file"
            check-sibling-md5: false
          }
        }
      }
    }
  }
}

# 数据库配置 - 使用内存数据库适合单机使用
database {
  profile = "slick.jdbc.HsqldbProfile$"
  db {
    driver = "org.hsqldb.jdbcDriver"
    url = "jdbc:hsqldb:mem:cromwell-db;shutdown=true;hsqldb.tx=mvcc"
    connectionTimeout = 1000
    numThreads = 1
  }
}

# 工作流选项
workflow-options {
  # 本地执行的工作流选项
  workflow-log-dir = "cromwell-workflow-logs"
  workflow-log-temporary = false
}

# 系统配置
system {
  # 适合单机的系统配置
  io {
    number-of-requests = 100000
    per-request-bytes = 100000
  }
  
  # 减少内存使用
  max-concurrent-workflows = 10
  max-workflow-launch-count = 50
  
  # 新工作流轮询间隔
  new-workflow-poll-rate = 20
  
  # 作业重试配置
  job-restart {
    max-retries = 3
    backoff {
      min = "3 seconds"
      max = "30 seconds"
      multiplier = 2.0
      randomization-factor = 0.1
    }
  }
}

# 调用缓存配置
call-caching {
  enabled = true
  invalidate-bad-cache-results = true
}